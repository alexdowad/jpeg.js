'use strict'

function equals(a, b) {
  if (Array.isArray(a)) {
    if (!Array.isArray(b))
      return false;
    return a.length == b.length && a.every((val, idx) => equals(val, b[idx]));
  } else {
    return a === b;
  }
}

function describeDifference(actual, expected) {
  if (actual.length != expected.length)
    return `Length is different: got ${actual.length}, expected ${expected.length}`;
  for (var i = 0; i < actual.length; i++)
    if (!equals(actual[i], expected[i]))
      return `Index ${i} is different: got ${actual[i]}, expected ${expected[i]}`;
}

function assertArray(actual, expected) {
  if (!Array.isArray(actual))
    throw new Error(`expected ${actual} to be an array`);
  if (!equals(actual, expected))
    throw new Error(`expected ${actual} to be ${expected}. ${describeDifference(actual, expected)}`);
}

function assertEquals(a, b) {
  if (a !== b)
    throw new Error(`expected ${a} to === ${b}`);
}

const { JPEG } = require('../jpeg.js');
var jpg = new JPEG();

/* Sample Huffman table from JPEG spec, K.3.3.1
 * Ensure we can decode it correctly */
var buf = Buffer.from([0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);
var tbl = jpg.readHuffmanTable(buf, 0);
assertEquals(tbl.number, 0);
assertEquals(tbl.type, 0);
assertEquals(tbl.codes.get('00'), 0);
assertEquals(tbl.codes.get('010'), 1);
assertEquals(tbl.codes.get('011'), 2);
assertEquals(tbl.codes.get('100'), 3);
assertEquals(tbl.codes.get('101'), 4);
assertEquals(tbl.codes.get('110'), 5);
assertEquals(tbl.codes.get('1110'), 6);
assertEquals(tbl.codes.get('11110'), 7);
assertEquals(tbl.codes.get('111110'), 8);
assertEquals(tbl.codes.get('1111110'), 9);
assertEquals(tbl.codes.get('11111110'), 10);
assertEquals(tbl.codes.get('111111110'), 11);

/* Test some helper routines */
var buf = Buffer.from([0xA6, 0x35]);
assertArray(jpg.readBits(buf, 0, 0, 0), [0, 0, 0]);
assertArray(jpg.readBits(buf, 0, 0, 3), [0, 3, 5]);
assertArray(jpg.readBits(buf, 0, 0, 8), [1, 0, 0xA6]);
assertArray(jpg.readBits(buf, 0, 0, 10), [1, 2, 0xA6 << 2]);
assertArray(jpg.readBits(buf, 0, 0, 16), [2, 0, 0xA635]);

assertArray(jpg.readBits(buf, 0, 1, 0), [0, 1, 0]);
assertArray(jpg.readBits(buf, 0, 1, 3), [0, 4, 2]);
assertArray(jpg.readBits(buf, 0, 1, 7), [1, 0, 0x26]);
assertArray(jpg.readBits(buf, 0, 1, 8), [1, 1, 0x26 << 1]);

assertArray(jpg.readBits(buf, 1, 0, 4), [1, 4, 3]);
assertArray(jpg.readBits(buf, 1, 1, 3), [1, 4, 3]);
assertArray(jpg.readBits(buf, 1, 1, 7), [2, 0, 0x35]);

/* Try decoding very simple JPEGs
 * The first ones are just solid colors */
const fs = require('fs');
var [jpg1, raster1] = JPEG.fromBytes(fs.readFileSync(__dirname + '/8x8-black-GIMP-basic.jpg'));
assertArray(Array.from(raster1), new Array(64 * 3).fill(0));

var [jpg2, raster2] = JPEG.fromBytes(fs.readFileSync(__dirname + '/8x8-white-GIMP-basic.jpg'));
assertArray(Array.from(raster2), new Array(64 * 3).fill(255));

var array3 = new Array(64 * 3);
for (var i = 0; i < 64*3; i += 3) {
  array3[i] = 238;
  array3[i+1] = 40;
  array3[i+2] = 41;
}
var [jpg3, raster3] = JPEG.fromBytes(fs.readFileSync(__dirname + '/8x8-red-drawing.jpg'));
assertArray(Array.from(raster3), array3);

/* Then stripes of various widths
 * First vertical stripes */
var array4 = [];
for (var i = 0; i < 8; i++)
  array4 = array4.concat([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
var [jpg4, raster4] = JPEG.fromBytes(fs.readFileSync(__dirname + '/8x8-black-white-1.jpg'));
assertArray(Array.from(raster4), array4);

/* Horizontal stripes */
var array5 = [];
array5 = array5.concat(new Array(16*3).fill(255));
array5 = array5.concat(new Array(16*3).fill(1));
array5 = array5.concat(new Array(16*3).fill(255));
array5 = array5.concat(new Array(16*3).fill(1));
var [jpg5, raster5] = JPEG.fromBytes(fs.readFileSync(__dirname + '/8x8-black-white-2.jpg'));
assertArray(Array.from(raster5), array5);

/* 16x16 with 4 colors */
var array6 = [];
for (var i = 0; i < 8; i++)
  array6 = array6.concat([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 241, 15, 39,
    241, 15, 39, 241, 15, 39, 241, 15, 39, 241, 15, 39, 241, 15, 39, 241, 15, 39, 241, 15, 39]);
for (var i = 0; i < 8; i++)
  array6 = array6.concat([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 1, 1, 223, 1, 1, 223, 1, 1, 223, 1, 1, 223, 1, 1, 223, 1, 1, 223, 1, 1, 223, 1, 1, 223]);
var [jpg6, raster6] = JPEG.fromBytes(fs.readFileSync(__dirname + '/16x16-four-colors.jpg'));
assertArray(Array.from(raster6), array6);

/* Sampling factor no longer 1:1:1
 * Samples for different image components need to be aligned correctly */
var array7 = [
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  241,  15,  39, 241,  15,  39, 241,  15,  39, 241,  15,  39,
  241,  15,  39, 241,  15,  39, 241,  14,  39, 241,  14,  39,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  241,  15,  39, 241,  15,  39, 241,  15,  39, 241,  15,  39,
  241,  15,  39, 241,  15,  39, 241,  14,  39, 241,  14,  39,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  241,  15,  39, 241,  15,  39, 240,  15,  39, 240,  15,  39,
  240,  15,  40, 240,  15,  40, 241,  15,  39, 241,  15,  39,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  241,  15,  39, 241,  15,  39, 240,  15,  39, 240,  15,  39,
  240,  15,  40, 240,  15,  40, 241,  15,  39, 241,  15,  39,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   0,   1,   1,   0,   1,   1,
  241,  15,  39, 241,  15,  39, 240,  15,  39, 240,  15,  39,
  240,  15,  39, 240,  15,  39, 241,  15,  39, 241,  15,  39,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   0,   1,   1,   0,   1,   1,
  241,  15,  39, 241,  15,  39, 240,  15,  39, 240,  15,  39,
  240,  15,  39, 240,  15,  39, 241,  15,  39, 241,  15,  39,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   2,   1,   1,   2,   1,   1,   2,   1,   1,   2,
  241,  14,  38, 241,  14,  38, 241,  15,  39, 241,  15,  39,
  241,  15,  39, 241,  15,  39, 241,  14,  39, 241,  14,  39,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   2,   1,   1,   2,   1,   1,   2,   1,   1,   2,
  241,  14,  38, 241,  14,  38, 241,  15,  39, 241,  15,  39,
  241,  15,  39, 241,  15,  39, 241,  14,  39, 241,  14,  39,
  255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 254,
    1,   1, 223,   1,   1, 223,   0,   1, 223,   0,   1, 223,
    1,   1, 223,   1,   1, 223,   1,   1, 222,   1,   1, 222,
  255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 254,
    1,   1, 223,   1,   1, 223,   0,   1, 223,   0,   1, 223,
    1,   1, 223,   1,   1, 223,   1,   1, 222,   1,   1, 222,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    1,   1, 223,   1,   1, 223,   1,   1, 222,   1,   1, 222,
    1,   0, 223,   1,   0, 223,   1,   1, 223,   1,   1, 223,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    1,   1, 223,   1,   1, 223,   1,   1, 222,   1,   1, 222,
    1,   0, 223,   1,   0, 223,   1,   1, 223,   1,   1, 223,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 254, 255, 255, 254, 255, 255,
    1,   0, 223,   1,   0, 223,   1,   1, 223,   1,   1, 223,
    1,   1, 222,   1,   1, 222,   1,   1, 223,   1,   1, 223,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 254, 255, 255, 254, 255, 255,
    1,   0, 223,   1,   0, 223,   1,   1, 223,   1,   1, 223,
    1,   1, 222,   1,   1, 222,   1,   1, 223,   1,   1, 223,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    1,   1, 223,   1,   1, 223,   0,   1, 222,   0,   1, 222,
    1,   1, 223,   1,   1, 223,   1,   1, 223,   1,   1, 223,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    1,   1, 223,   1,   1, 223,   0,   1, 222,   0,   1, 222,
    1,   1, 223,   1,   1, 223,   1,   1, 223,   1,   1, 223
]
var [jpg7, raster7] = JPEG.fromBytes(fs.readFileSync(__dirname + '/16x16-different-sampling-factor.jpg'));
assertArray(Array.from(raster7), array7);

/* Same image, but 13x13
 * See if JPEG decoding works for images with resolution which is not a multiple of 8 */
var array8 = new Array(13*13*3);
for (var i = 0; i < 13; i++) {
  for (var j = 0; j < 13; j++) {
    for (var k = 0; k < 3; k++) {
      array8[i*13*3 + j*3 + k] = array7[i*16*3 + j*3 + k];
    }
  }
}
var [jpg8, raster8] = JPEG.fromBytes(fs.readFileSync(__dirname + '/13x13-four-colors.jpg'));
assertArray(Array.from(raster8), array8);

/* Now grayscale (to ensure color space conversion works) */
var array9 = [
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
  124, 124, 124,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1, 124, 124, 124, 124, 124, 124, 124, 124, 124,
  124, 124, 124, 124, 124, 124,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1, 124, 124, 124, 124, 124, 124,
  124, 124, 124, 124, 124, 124, 124, 124, 124,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1, 124, 124, 124,
  124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
  124, 124, 124,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1, 124, 124, 124, 124, 124, 124, 124, 124, 124,
  124, 124, 124, 124, 124, 124,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1, 124, 124, 124, 124, 124, 124,
  124, 124, 124, 124, 124, 124, 124, 124, 124,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1, 124, 124, 124,
  124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
  254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
  254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
   60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,
   60,  60,  60, 254, 254, 254, 254, 254, 254, 254, 254, 254,
  254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
  254, 254, 254,  60,  60,  60,  60,  60,  60,  60,  60,  60,
   60,  60,  60,  60,  60,  60, 254, 254, 254, 254, 254, 254,
  254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
  254, 254, 254, 254, 254, 254,  60,  60,  60,  60,  60,  60,
   60,  60,  60,  60,  60,  60,  60,  60,  60, 254, 254, 254,
  254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
  254, 254, 254, 254, 254, 254, 254, 254, 254,  60,  60,  60,
   60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,
  254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
  254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
   60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,
   60,  60,  60
];
var [jpg9, raster9] = JPEG.fromBytes(fs.readFileSync(__dirname + '/13x13-grayscale.jpg'));
assertArray(Array.from(raster9), array9);

/* Using restart markers */
var [jpg10, raster10] = JPEG.fromBytes(fs.readFileSync(__dirname + '/16x16-restart-markers.jpg'));
assertArray(Array.from(raster10), array6); /* Contents of image are same as #6 */

/* Arithmetic-coded JPEGs; start from 8x8 flat white image */
var [jpg11, raster11] = JPEG.fromBytes(fs.readFileSync(__dirname + '/arithmetic0.jpg'));
assertArray(Array.from(raster11), new Array(192).fill(255));

/* Arithmetic-coded flat red image */
var array12 = [];
for (var i = 0; i < 64; i++) {
  array12.push(254);
  array12.push(0);
  array12.push(0);
}
var [jpg12, raster12] = JPEG.fromBytes(fs.readFileSync(__dirname + '/arithmetic1.jpg'));
assertArray(Array.from(raster12), array12);

/* Arithmetic-coded, half-white, half-red */
var array13 = [];
for (var i = 0; i < 8; i++)
  array13 = array13.concat([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    241, 15, 39, 241, 15, 39, 240, 15, 39, 241, 15, 39]);
var [jpg13, raster13] = JPEG.fromBytes(fs.readFileSync(__dirname + '/arithmetic2.jpg'));
assertArray(Array.from(raster13), array13);

/* Arithmetic-coded, resolution not multiple of 8, uneven red-white pattern */
var array14 = [
  241,  14,  39, 240,  15,  38, 241,  15,  39, 242,  15,  39,
  242,  14,  40, 240,  15,  39, 240,  15,  38, 241,  15,  39,
  241,  15,  39, 241,  15,  39, 241,  15,  39, 241,  15,  39,
  241,  15,  39, 240,  15,  39, 241,  15,  39, 242,  15,  38,
  241,  15,  39, 241,  15,  39, 241,  15,  38, 241,  15,  38,
  241,  15,  39, 241,  15,  39, 241,  15,  39, 241,  15,  39,
  240,  14,  39, 241,  15,  38, 242,  14,  39, 255, 255, 255,
  254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  240,  14,  38, 240,  15,  39, 241,  15,  39, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  241,  15,  39, 240,  14,  38, 242,  15,  38, 255, 255, 255,
  255, 255, 255, 254, 255, 254, 255, 255, 255, 255, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  241,  14,  40, 241,  14,  39, 240,  14,  38, 254, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  241,  15,  39, 240,  15,  38, 241,  15,  38, 255, 255, 255,
  255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  241,  15,  39, 241,  14,  40, 240,  15,  38, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  241,  15,  39, 241,  15,  39, 241,  15,  39, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  241,  15,  39, 241,  15,  39, 241,  15,  39, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  241,  15,  39, 241,  15,  39, 241,  15,  39, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  241,  15,  39, 241,  15,  39, 241,  15,  39, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
]
var [jpg14, raster14] = JPEG.fromBytes(fs.readFileSync(__dirname + '/arithmetic3.jpg'));
assertArray(Array.from(raster14), array14);

/* Now progressive JPEGs
 * This one is flat white, the same as #2 */
var [jpg15, raster15] = JPEG.fromBytes(fs.readFileSync(__dirname + '/progressive0.jpg'));
assertArray(Array.from(raster15), new Array(64 * 3).fill(255));

/* Progressive, half-white half-red */
var array16 = [];
for (var i = 0; i < 8; i++)
  array16 = array16.concat([254, 0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
var [jpg16, raster16] = JPEG.fromBytes(fs.readFileSync(__dirname + '/progressive1.jpg'));
assertArray(Array.from(raster16), array16);

/* Progressive, slightly larger with uneven pattern of solid colors */
const array17 = [
  255,   0,   0, 254,   0,   0, 254,   0,   0, 254,   0,   0,
    0,   1, 253,   0,   1, 254,   0,   0, 254,   0,   0, 254,
    0,   0, 254,   0,   0, 254,   0,   0, 254, 255,   0,   0,
  254,   0,   0, 254,   0,   0, 255,   0,   0,   0,   0, 254,
    0,   0, 255,   0,   0, 255,   0,   0, 255,   0,   0, 254,
    0,   0, 254,   0,   0, 254, 254,   0,   0, 254,   0,   0,
  255,   0,   0, 254,   0,   0,   0,   0, 254,   0,   0, 254,
    0,   1, 254,   0,   1, 254,   0,   0, 254,   0,   0, 254,
    0,   0, 254, 254,   1,   0, 254,   0,   0, 255,   0,   0,
  254,   0,   0, 255, 255, 255, 254, 255, 255, 255, 255, 255,
  255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  254,   0,   1, 253,   0,   0, 254,   0,   0, 255,   0,   0,
  255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 253,   0,   0,
  254,   0,   0, 254,   0,   0, 254,   0,   1, 255, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 254,   0,   0, 254,   0,   1,
  254,   0,   0, 254,   0,   0, 255, 255, 255, 255, 255, 255,
  255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 254,   0,   0, 255,   0,   0, 254,   0,   0,
  255,   0,   0, 254, 255, 255, 255, 255, 254, 254, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  254,   0,   0, 254,   0,   0, 254,   0,   0, 254,   0,   0,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 254,   0,   0,
  254,   0,   0, 254,   0,   0, 254,   0,   0, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 254,   0,   0, 254,   0,   0,
  254,   0,   0, 254,   0,   0, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255
];
var [jpg17, raster17] = JPEG.fromBytes(fs.readFileSync(__dirname + '/progressive2.jpg'));
assertArray(Array.from(raster17), array17);

/* Progressive AND arithmetic-coded
 * As usual, start with a flat white image */
var [jpg18, raster18] = JPEG.fromBytes(fs.readFileSync(__dirname + '/prog-arith0.jpg'));
assertArray(Array.from(raster18), new Array(64 * 3).fill(255));

/* Progressive and arithmetic-coded, flat blue */
const array19 = [
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254
];
var [jpg19, raster19] = JPEG.fromBytes(fs.readFileSync(__dirname + '/prog-arith1.jpg'));
assertArray(Array.from(raster19), array19);

/* Progressive and arithmetic-coded, 11x11 size (not multiple of 8), various colors */
const array20 = [
  255, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 255, 255, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255, 255, 255, 255,   0, 255, 255,
    1, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 254,   0, 255, 255,
    0, 255, 255, 255, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 254,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 254,   0, 255, 255,   0, 255, 255,   0, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 254,   0,   0, 255,
    0,   0, 255,   0,   0, 254,   0,   0, 254,   0,   1, 255,
    0,   0, 254,   0,   1, 254,   0,   0, 255, 255, 255, 255,
  254,   0,   0, 254,   0,   1,   0,   0, 254,   0,   0, 255,
    0,   0, 253,   0,   0, 253,   0,   0, 254,   0,   1, 254,
    0,   1, 254,   0,   0, 254, 254, 255, 254, 254,   0,   0,
  254,   0,   0,   0,   0, 255,   0,   0, 254,   0,   0, 254,
    0,   1, 254,   0,   0, 254,   0,   0, 255,   0,   0, 254,
    0,   0, 255, 255, 255, 255, 254,   0,   0, 254,   1,   0,
    0,   0, 254,   0,   0, 254,   0,   0, 254,   0,   0, 254,
    0,   0, 254,   0,   0, 254,   0,   0, 254,   0,   0, 254,
  255, 255, 255, 254,   0,   0, 254,   0,   0,   0,   0, 254,
    0,   0, 254,   0,   0, 254,   0,   0, 254,   0,   0, 254,
    0,   0, 254,   0,   0, 254,   0,   0, 254, 255, 255, 255,
  254,   0,   0, 254,   0,   0,   0,   0, 254,   0,   0, 254,
    0,   0, 254,   0,   0, 254,   0,   0, 254,   0,   0, 254,
    0,   0, 254,   0,   0, 254, 255, 255, 255, 254,   0,   0,
  254,   0,   0
];
var [jpg20, raster20] = JPEG.fromBytes(fs.readFileSync(__dirname + '/prog-arith2.jpg'));
assertArray(Array.from(raster20), array20);

/* Flat white image; restart interval is LESS than total MCUs in image */
var [jpg21, raster21] = JPEG.fromBytes(fs.readFileSync(__dirname + '/restart+subsampling.jpg'));
assertArray(Array.from(raster21), new Array(3 * 11 * 11).fill(255));

/* 11x11 with varied colors; progressive, arithmetic-coded, uses restarts and varied sampling factors */
const array22 = [
  255,   0,   1, 255,   0,   1, 165,  37,  38, 255, 217, 218,
  255, 254, 255, 255, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 255, 254,   0,   1,
  254,   0,   1, 166,  38,  38, 255, 217, 217, 254, 255, 255,
  255, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255, 254,   0,   1, 254,   0,   1,
  165,  37,  38, 255, 217, 218, 254, 255, 255, 254, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 217, 218,
  166,  38,  38, 254,   0,   1, 254,   0,   1, 255, 255, 255,
  255, 255, 255, 255, 254, 255, 255, 254, 255, 255, 255, 255,
  254, 255, 254, 254, 255, 255, 255, 217, 218, 166,  38,  39,
  254,   0,   0, 254,   0,   0, 254, 255, 255, 254, 255, 254,
  255, 255, 254, 255, 255, 254, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 216, 218, 166,  37,  39, 254,   0,   0,
  254,   0,   0, 255, 255, 255, 254, 255, 255, 255, 255, 255,
  255, 255, 255, 254, 255, 255,   0,   0,   0,   0,   0,   0,
    0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255,   0, 255, 255,   0,
  255, 255,   0, 255, 255,   0, 255, 255,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0, 255, 255,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0
];
var [jpg22, raster22] = JPEG.fromBytes(fs.readFileSync(__dirname + '/prog+arith+restart+sampling.jpg'));
assertArray(Array.from(raster22), array22);

/* Similar, but with Huffman coding, and the subsampling is in the vertical direction */
const array23 = [
  255,   0,   1, 254,   0,   0, 254,   0,   0, 255, 255, 255,
  255, 254, 254, 255, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 255, 255,   0,   1,
  254,   0,   0, 255,   0,   0, 254, 255, 255, 255, 255, 255,
  255, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255, 165,  39,  38, 166,  38,  41,
  165,  37,  38, 255, 216, 218, 255, 217, 218, 255, 216, 218,
   89, 217, 217,  90, 218, 219,  89, 217, 218,  89, 217, 218,
   90, 217, 218, 255, 217, 217, 255, 217, 220, 255, 217, 218,
  166,  37,  39, 166,  37,  38, 166,  38,  39, 165, 255, 255,
  165, 255, 255, 165, 255, 255, 165, 255, 255, 165, 255, 255,
  255, 254, 255, 255, 254, 255, 255, 255, 255, 254,   0,   0,
  254,   0,   0, 254,   0,   0, 254, 255, 255, 254, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 254, 255, 254,   0,   0, 254,   0,   0,
  255,   0,   0, 255, 255, 255, 255, 255, 254, 254, 255, 255,
  255, 255, 255, 255, 255, 255,   1,   0,   1,   0,   0,   0,
    0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
    0,   0,   0,   1,   0,   0,   0,   0,   0, 255, 255, 255,
  254, 255, 255, 255, 255, 255, 255, 255,   0, 255, 255,   0,
  255, 255,   0, 255, 255,   0, 255, 255,   0,   0,   0,   0,
    1,   0,   0,   0,   0,   0, 255, 255, 255, 254, 255, 255,
  255, 255, 255, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0, 255, 255,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0
];
var [jpg23, raster23] = JPEG.fromBytes(fs.readFileSync(__dirname + '/prog+restart+sampling.jpg'));
assertArray(Array.from(raster23), array23);

/* Similar, with arithmetic coding and subsampling in vertical direction */
const array24 = [
  255,   0,   1, 254,   0,   0, 254,   0,   0, 255, 255, 255,
  255, 254, 254, 255, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 255, 255,   0,   1,
  254,   0,   0, 255,   0,   0, 254, 255, 255, 255, 255, 255,
  255, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255, 165,  39,  38, 166,  38,  41,
  165,  37,  38, 255, 216, 218, 255, 217, 218, 255, 216, 218,
   89, 217, 217,  90, 218, 219,  90, 217, 218,  90, 217, 218,
   90, 217, 218, 255, 217, 217, 255, 217, 220, 255, 217, 218,
  166,  37,  39, 166,  37,  38, 166,  38,  39, 165, 255, 255,
  165, 255, 255, 165, 255, 255, 165, 255, 255, 165, 255, 255,
  255, 254, 255, 255, 254, 255, 255, 255, 255, 254,   0,   0,
  254,   0,   0, 254,   0,   0, 254, 255, 255, 254, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 254, 255, 254,   0,   0, 254,   0,   0,
  255,   0,   0, 255, 255, 255, 255, 255, 254, 255, 255, 255,
  255, 255, 255, 255, 255, 255,   1,   0,   1,   0,   0,   0,
    0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
    0,   0,   0,   1,   0,   0,   0,   0,   0, 255, 255, 255,
  254, 255, 255, 255, 255, 255, 255, 255,   0, 255, 255,   0,
  255, 255,   0, 255, 255,   0, 255, 255,   0,   0,   0,   0,
    1,   0,   0,   0,   0,   0, 255, 255, 255, 254, 255, 255,
  255, 255, 255, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0, 255, 255,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0
];
var [jpg24, raster24] = JPEG.fromBytes(fs.readFileSync(__dirname + '/prog+arith+vertsampling.jpg'));
assertArray(Array.from(raster24), array24);

/* Randomly generated JPEGs
 * Each of these revealed at least one bug */

/* Series of multiple zero bands in successive approximation scans */
const array25 = [
  168, 208, 141, 223, 143, 165, 247,  10, 235, 209,  89, 140,
  240,  83,   2,  91, 107, 229, 234, 146, 122, 250, 110, 225,
  220, 191, 136, 206, 205, 185, 155, 126,  36,  95, 247, 142,
  241, 245, 103,  77, 234, 152,  47, 101,   4, 123, 250,  48,
  250,  83,  61,  68, 117,  94,  79,  74,   6,  42,  26, 232,
  182, 113,  73, 192,  23, 171, 157, 240, 244,  59, 228,  48,
   56, 137, 145, 173,  24,  25,  31,  74, 126, 145,  82, 153,
  194, 254,  67,   5, 150,  46,  22,  89, 231,  37,  74, 187,
  147, 122, 194, 228,  97,  29,  34, 106, 102, 106, 231, 248,
  198, 166, 170, 238,  56,  41, 190,  71, 188, 226, 185, 243,
   97,   8, 132, 183, 123, 235, 169, 108, 138, 109,  82, 229,
  240,  76, 156, 219, 128,  84,  35, 103, 114, 227, 154,  95,
   78,  93,  92,  85, 127, 165, 241, 221, 121, 110,  94, 100,
  138, 231,  67, 224,  77, 157, 232, 232, 224, 216, 184, 122,
  109, 141,  56, 204, 142,   6, 130, 237, 219, 215, 126,  50,
  207, 252, 112,  35, 101,  39, 242,  46, 250,  86, 237, 220,
   74, 255, 120, 173, 139, 134, 182, 225, 122, 224,  72,  30,
    9,  27,  79, 119,   3, 120, 146, 224, 183,  86, 177, 102,
  175, 206,  25, 197, 149,  62, 157, 161, 153,  43,  38,  56,
   74, 123,   5,  78,  30,  86, 148, 237, 253,  74, 157, 194,
  135, 215, 249, 223, 191, 138,  33, 203, 153, 113, 178, 197,
  235,   8, 174,  60, 185, 166, 218,  79, 109,  73, 219, 160,
   99, 188, 251, 123,  66, 155,  57, 101, 185,  64, 107, 137,
  153,  94, 180,  47, 253,  50, 236, 222, 177,  32, 166,  67,
  173, 127,  10,  51, 133, 220,  73, 140, 147,  58,  59, 202
];
var [jpg25, raster25] = JPEG.fromBytes(fs.readFileSync(__dirname + '/random0.jpg'));
assertArray(Array.from(raster25), array25);

console.log("OK!");
