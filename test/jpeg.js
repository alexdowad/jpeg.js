#!/usr/bin/env node

'use strict';

function equals(a, b) {
  if (Array.isArray(a)) {
    if (!Array.isArray(b))
      return false;
    return a.length == b.length && a.every((val, idx) => equals(val, b[idx]));
  } else {
    return a === b;
  }
}

function describeDifference(actual, expected) {
  if (actual.length != expected.length)
    return `Length is different: got ${actual.length}, expected ${expected.length}`;
  for (var i = 0; i < actual.length; i++)
    if (!equals(actual[i], expected[i]))
      return `Index ${i} is different: got ${actual[i]}, expected ${expected[i]}`;
}

function assertArray(actual, expected) {
  if (!Array.isArray(actual))
    throw new Error(`expected ${actual} to be an array`);
  if (!equals(actual, expected))
    throw new Error(`expected ${actual} to be ${expected}. ${describeDifference(actual, expected)}`);
}

function assertEquals(a, b) {
  if (a !== b)
    throw new Error(`expected ${a} to === ${b}`);
}

const { JPEG } = require('../jpeg.js');
var jpg = new JPEG();

/* Sample Huffman table from JPEG spec, K.3.3.1
 * Ensure we can decode it correctly */
var buf = Buffer.from([0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);
var tbl = jpg.readHuffmanTable(buf, 0);
assertEquals(tbl.number, 0);
assertEquals(tbl.type, 0);
assertEquals(tbl.codes.get('00'), 0);
assertEquals(tbl.codes.get('010'), 1);
assertEquals(tbl.codes.get('011'), 2);
assertEquals(tbl.codes.get('100'), 3);
assertEquals(tbl.codes.get('101'), 4);
assertEquals(tbl.codes.get('110'), 5);
assertEquals(tbl.codes.get('1110'), 6);
assertEquals(tbl.codes.get('11110'), 7);
assertEquals(tbl.codes.get('111110'), 8);
assertEquals(tbl.codes.get('1111110'), 9);
assertEquals(tbl.codes.get('11111110'), 10);
assertEquals(tbl.codes.get('111111110'), 11);

/* Test some helper routines */
var buf = Buffer.from([0xA6, 0x35]);
assertArray(jpg.readBits(buf, 0, 0, 0), [0, 0, 0]);
assertArray(jpg.readBits(buf, 0, 0, 3), [0, 3, 5]);
assertArray(jpg.readBits(buf, 0, 0, 8), [1, 0, 0xA6]);
assertArray(jpg.readBits(buf, 0, 0, 10), [1, 2, 0xA6 << 2]);
assertArray(jpg.readBits(buf, 0, 0, 16), [2, 0, 0xA635]);

assertArray(jpg.readBits(buf, 0, 1, 0), [0, 1, 0]);
assertArray(jpg.readBits(buf, 0, 1, 3), [0, 4, 2]);
assertArray(jpg.readBits(buf, 0, 1, 7), [1, 0, 0x26]);
assertArray(jpg.readBits(buf, 0, 1, 8), [1, 1, 0x26 << 1]);

assertArray(jpg.readBits(buf, 1, 0, 4), [1, 4, 3]);
assertArray(jpg.readBits(buf, 1, 1, 3), [1, 4, 3]);
assertArray(jpg.readBits(buf, 1, 1, 7), [2, 0, 0x35]);

/* Try decoding very simple JPEGs
 * The first ones are just solid colors */
const fs = require('fs');
var [jpg1, raster1] = JPEG.fromBytes(fs.readFileSync(__dirname + '/8x8-black-GIMP-basic.jpg'));
assertArray(Array.from(raster1), new Array(64 * 3).fill(0));

var [jpg2, raster2] = JPEG.fromBytes(fs.readFileSync(__dirname + '/8x8-white-GIMP-basic.jpg'));
assertArray(Array.from(raster2), new Array(64 * 3).fill(255));

var array3 = new Array(64 * 3);
for (var i = 0; i < 64*3; i += 3) {
  array3[i] = 238;
  array3[i+1] = 40;
  array3[i+2] = 41;
}
var [jpg3, raster3] = JPEG.fromBytes(fs.readFileSync(__dirname + '/8x8-red-drawing.jpg'));
assertArray(Array.from(raster3), array3);

/* Then stripes of various widths
 * First vertical stripes */
var array4 = [];
for (var i = 0; i < 8; i++)
  array4 = array4.concat([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
var [jpg4, raster4] = JPEG.fromBytes(fs.readFileSync(__dirname + '/8x8-black-white-1.jpg'));
assertArray(Array.from(raster4), array4);

/* Horizontal stripes */
var array5 = [];
array5 = array5.concat(new Array(16*3).fill(255));
array5 = array5.concat(new Array(16*3).fill(1));
array5 = array5.concat(new Array(16*3).fill(255));
array5 = array5.concat(new Array(16*3).fill(1));
var [jpg5, raster5] = JPEG.fromBytes(fs.readFileSync(__dirname + '/8x8-black-white-2.jpg'));
assertArray(Array.from(raster5), array5);

/* 16x16 with 4 colors */
var array6 = [];
for (var i = 0; i < 8; i++)
  array6 = array6.concat([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 241, 15, 39,
    241, 15, 39, 241, 15, 39, 241, 15, 39, 241, 15, 39, 241, 15, 39, 241, 15, 39, 241, 15, 39]);
for (var i = 0; i < 8; i++)
  array6 = array6.concat([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 1, 1, 223, 1, 1, 223, 1, 1, 223, 1, 1, 223, 1, 1, 223, 1, 1, 223, 1, 1, 223, 1, 1, 223]);
var [jpg6, raster6] = JPEG.fromBytes(fs.readFileSync(__dirname + '/16x16-four-colors.jpg'));
assertArray(Array.from(raster6), array6);

/* Sampling factor no longer 1:1:1
 * Samples for different image components need to be aligned correctly */
var array7 = [
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  241,  15,  39, 241,  15,  39, 241,  15,  39, 241,  15,  39,
  241,  15,  39, 241,  15,  39, 241,  14,  39, 241,  14,  39,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  241,  15,  39, 241,  15,  39, 241,  15,  39, 241,  15,  39,
  241,  15,  39, 241,  15,  39, 241,  14,  39, 241,  14,  39,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  241,  15,  39, 241,  15,  39, 240,  15,  39, 240,  15,  39,
  240,  15,  40, 240,  15,  40, 241,  15,  39, 241,  15,  39,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  241,  15,  39, 241,  15,  39, 240,  15,  39, 240,  15,  39,
  240,  15,  40, 240,  15,  40, 241,  15,  39, 241,  15,  39,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   0,   1,   1,   0,   1,   1,
  241,  15,  39, 241,  15,  39, 240,  15,  39, 240,  15,  39,
  240,  15,  39, 240,  15,  39, 241,  15,  39, 241,  15,  39,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   0,   1,   1,   0,   1,   1,
  241,  15,  39, 241,  15,  39, 240,  15,  39, 240,  15,  39,
  240,  15,  39, 240,  15,  39, 241,  15,  39, 241,  15,  39,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   2,   1,   1,   2,   1,   1,   2,   1,   1,   2,
  241,  14,  38, 241,  14,  38, 241,  15,  39, 241,  15,  39,
  241,  15,  39, 241,  15,  39, 241,  14,  39, 241,  14,  39,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   2,   1,   1,   2,   1,   1,   2,   1,   1,   2,
  241,  14,  38, 241,  14,  38, 241,  15,  39, 241,  15,  39,
  241,  15,  39, 241,  15,  39, 241,  14,  39, 241,  14,  39,
  255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 254,
    1,   1, 223,   1,   1, 223,   0,   1, 223,   0,   1, 223,
    1,   1, 223,   1,   1, 223,   1,   1, 222,   1,   1, 222,
  255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 254,
    1,   1, 223,   1,   1, 223,   0,   1, 223,   0,   1, 223,
    1,   1, 223,   1,   1, 223,   1,   1, 222,   1,   1, 222,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    1,   1, 223,   1,   1, 223,   1,   1, 222,   1,   1, 222,
    1,   0, 223,   1,   0, 223,   1,   1, 223,   1,   1, 223,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    1,   1, 223,   1,   1, 223,   1,   1, 222,   1,   1, 222,
    1,   0, 223,   1,   0, 223,   1,   1, 223,   1,   1, 223,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 254, 255, 255, 254, 255, 255,
    1,   0, 223,   1,   0, 223,   1,   1, 223,   1,   1, 223,
    1,   1, 222,   1,   1, 222,   1,   1, 223,   1,   1, 223,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 254, 255, 255, 254, 255, 255,
    1,   0, 223,   1,   0, 223,   1,   1, 223,   1,   1, 223,
    1,   1, 222,   1,   1, 222,   1,   1, 223,   1,   1, 223,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    1,   1, 223,   1,   1, 223,   0,   1, 222,   0,   1, 222,
    1,   1, 223,   1,   1, 223,   1,   1, 223,   1,   1, 223,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    1,   1, 223,   1,   1, 223,   0,   1, 222,   0,   1, 222,
    1,   1, 223,   1,   1, 223,   1,   1, 223,   1,   1, 223
]
var [jpg7, raster7] = JPEG.fromBytes(fs.readFileSync(__dirname + '/16x16-different-sampling-factor.jpg'));
assertArray(Array.from(raster7), array7);

/* Same image, but 13x13
 * See if JPEG decoding works for images with resolution which is not a multiple of 8 */
var array8 = new Array(13*13*3);
for (var i = 0; i < 13; i++) {
  for (var j = 0; j < 13; j++) {
    for (var k = 0; k < 3; k++) {
      array8[i*13*3 + j*3 + k] = array7[i*16*3 + j*3 + k];
    }
  }
}
var [jpg8, raster8] = JPEG.fromBytes(fs.readFileSync(__dirname + '/13x13-four-colors.jpg'));
assertArray(Array.from(raster8), array8);

/* Now grayscale (to ensure color space conversion works) */
var array9 = [
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
  124, 124, 124,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1, 124, 124, 124, 124, 124, 124, 124, 124, 124,
  124, 124, 124, 124, 124, 124,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1, 124, 124, 124, 124, 124, 124,
  124, 124, 124, 124, 124, 124, 124, 124, 124,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1, 124, 124, 124,
  124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
  124, 124, 124,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1, 124, 124, 124, 124, 124, 124, 124, 124, 124,
  124, 124, 124, 124, 124, 124,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1, 124, 124, 124, 124, 124, 124,
  124, 124, 124, 124, 124, 124, 124, 124, 124,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1, 124, 124, 124,
  124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
  254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
  254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
   60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,
   60,  60,  60, 254, 254, 254, 254, 254, 254, 254, 254, 254,
  254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
  254, 254, 254,  60,  60,  60,  60,  60,  60,  60,  60,  60,
   60,  60,  60,  60,  60,  60, 254, 254, 254, 254, 254, 254,
  254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
  254, 254, 254, 254, 254, 254,  60,  60,  60,  60,  60,  60,
   60,  60,  60,  60,  60,  60,  60,  60,  60, 254, 254, 254,
  254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
  254, 254, 254, 254, 254, 254, 254, 254, 254,  60,  60,  60,
   60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,
  254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
  254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
   60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,
   60,  60,  60
];
var [jpg9, raster9] = JPEG.fromBytes(fs.readFileSync(__dirname + '/13x13-grayscale.jpg'));
assertArray(Array.from(raster9), array9);

/* Using restart markers */
var [jpg10, raster10] = JPEG.fromBytes(fs.readFileSync(__dirname + '/16x16-restart-markers.jpg'));
assertArray(Array.from(raster10), array6); /* Contents of image are same as #6 */

/* Arithmetic-coded JPEGs; start from 8x8 flat white image */
var [jpg11, raster11] = JPEG.fromBytes(fs.readFileSync(__dirname + '/arithmetic0.jpg'));
assertArray(Array.from(raster11), new Array(192).fill(255));

/* Arithmetic-coded flat red image */
var array12 = [];
for (var i = 0; i < 64; i++) {
  array12.push(254);
  array12.push(0);
  array12.push(0);
}
var [jpg12, raster12] = JPEG.fromBytes(fs.readFileSync(__dirname + '/arithmetic1.jpg'));
assertArray(Array.from(raster12), array12);

/* Arithmetic-coded, half-white, half-red */
var array13 = [];
for (var i = 0; i < 8; i++)
  array13 = array13.concat([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    241, 15, 39, 241, 15, 39, 240, 15, 39, 241, 15, 39]);
var [jpg13, raster13] = JPEG.fromBytes(fs.readFileSync(__dirname + '/arithmetic2.jpg'));
assertArray(Array.from(raster13), array13);

/* Arithmetic-coded, resolution not multiple of 8, uneven red-white pattern */
var array14 = [
  241,  14,  39, 240,  15,  38, 241,  15,  39, 242,  15,  39,
  242,  14,  40, 240,  15,  39, 240,  15,  38, 241,  15,  39,
  241,  15,  39, 241,  15,  39, 241,  15,  39, 241,  15,  39,
  241,  15,  39, 240,  15,  39, 241,  15,  39, 242,  15,  38,
  241,  15,  39, 241,  15,  39, 241,  15,  38, 241,  15,  38,
  241,  15,  39, 241,  15,  39, 241,  15,  39, 241,  15,  39,
  240,  14,  39, 241,  15,  38, 242,  14,  39, 255, 255, 255,
  254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  240,  14,  38, 240,  15,  39, 241,  15,  39, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  241,  15,  39, 240,  14,  38, 242,  15,  38, 255, 255, 255,
  255, 255, 255, 254, 255, 254, 255, 255, 255, 255, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  241,  14,  40, 241,  14,  39, 240,  14,  38, 254, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  241,  15,  39, 240,  15,  38, 241,  15,  38, 255, 255, 255,
  255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  241,  15,  39, 241,  14,  40, 240,  15,  38, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  241,  15,  39, 241,  15,  39, 241,  15,  39, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  241,  15,  39, 241,  15,  39, 241,  15,  39, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  241,  15,  39, 241,  15,  39, 241,  15,  39, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  241,  15,  39, 241,  15,  39, 241,  15,  39, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
]
var [jpg14, raster14] = JPEG.fromBytes(fs.readFileSync(__dirname + '/arithmetic3.jpg'));
assertArray(Array.from(raster14), array14);

/* Now progressive JPEGs
 * This one is flat white, the same as #2 */
var [jpg15, raster15] = JPEG.fromBytes(fs.readFileSync(__dirname + '/progressive0.jpg'));
assertArray(Array.from(raster15), new Array(64 * 3).fill(255));

/* Progressive, half-white half-red */
var array16 = [];
for (var i = 0; i < 8; i++)
  array16 = array16.concat([254, 0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
var [jpg16, raster16] = JPEG.fromBytes(fs.readFileSync(__dirname + '/progressive1.jpg'));
assertArray(Array.from(raster16), array16);

/* Progressive, slightly larger with uneven pattern of solid colors */
const array17 = [
  255,   0,   0, 254,   0,   0, 254,   0,   0, 254,   0,   0,
    0,   1, 253,   0,   1, 254,   0,   0, 254,   0,   0, 254,
    0,   0, 254,   0,   0, 254,   0,   0, 254, 255,   0,   0,
  254,   0,   0, 254,   0,   0, 255,   0,   0,   0,   0, 254,
    0,   0, 255,   0,   0, 255,   0,   0, 255,   0,   0, 254,
    0,   0, 254,   0,   0, 254, 254,   0,   0, 254,   0,   0,
  255,   0,   0, 254,   0,   0,   0,   0, 254,   0,   0, 254,
    0,   1, 254,   0,   1, 254,   0,   0, 254,   0,   0, 254,
    0,   0, 254, 254,   1,   0, 254,   0,   0, 255,   0,   0,
  254,   0,   0, 255, 255, 255, 254, 255, 255, 255, 255, 255,
  255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  254,   0,   1, 253,   0,   0, 254,   0,   0, 255,   0,   0,
  255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 253,   0,   0,
  254,   0,   0, 254,   0,   0, 254,   0,   1, 255, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 254,   0,   0, 254,   0,   1,
  254,   0,   0, 254,   0,   0, 255, 255, 255, 255, 255, 255,
  255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 254,   0,   0, 255,   0,   0, 254,   0,   0,
  255,   0,   0, 254, 255, 255, 255, 255, 254, 254, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  254,   0,   0, 254,   0,   0, 254,   0,   0, 254,   0,   0,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 254,   0,   0,
  254,   0,   0, 254,   0,   0, 254,   0,   0, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 254,   0,   0, 254,   0,   0,
  254,   0,   0, 254,   0,   0, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255
];
var [jpg17, raster17] = JPEG.fromBytes(fs.readFileSync(__dirname + '/progressive2.jpg'));
assertArray(Array.from(raster17), array17);

/* Progressive AND arithmetic-coded
 * As usual, start with a flat white image */
var [jpg18, raster18] = JPEG.fromBytes(fs.readFileSync(__dirname + '/prog-arith0.jpg'));
assertArray(Array.from(raster18), new Array(64 * 3).fill(255));

/* Progressive and arithmetic-coded, flat blue */
const array19 = [
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254,
  0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254
];
var [jpg19, raster19] = JPEG.fromBytes(fs.readFileSync(__dirname + '/prog-arith1.jpg'));
assertArray(Array.from(raster19), array19);

/* Progressive and arithmetic-coded, 11x11 size (not multiple of 8), various colors */
const array20 = [
  255, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 255, 255, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255, 255, 255, 255,   0, 255, 255,
    1, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 254,   0, 255, 255,
    0, 255, 255, 255, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 254,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 254,   0, 255, 255,   0, 255, 255,   0, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 254,   0,   0, 255,
    0,   0, 255,   0,   0, 254,   0,   0, 254,   0,   1, 255,
    0,   0, 254,   0,   1, 254,   0,   0, 255, 255, 255, 255,
  254,   0,   0, 254,   0,   1,   0,   0, 254,   0,   0, 255,
    0,   0, 253,   0,   0, 253,   0,   0, 254,   0,   1, 254,
    0,   1, 254,   0,   0, 254, 254, 255, 254, 254,   0,   0,
  254,   0,   0,   0,   0, 255,   0,   0, 254,   0,   0, 254,
    0,   1, 254,   0,   0, 254,   0,   0, 255,   0,   0, 254,
    0,   0, 255, 255, 255, 255, 254,   0,   0, 254,   1,   0,
    0,   0, 254,   0,   0, 254,   0,   0, 254,   0,   0, 254,
    0,   0, 254,   0,   0, 254,   0,   0, 254,   0,   0, 254,
  255, 255, 255, 254,   0,   0, 254,   0,   0,   0,   0, 254,
    0,   0, 254,   0,   0, 254,   0,   0, 254,   0,   0, 254,
    0,   0, 254,   0,   0, 254,   0,   0, 254, 255, 255, 255,
  254,   0,   0, 254,   0,   0,   0,   0, 254,   0,   0, 254,
    0,   0, 254,   0,   0, 254,   0,   0, 254,   0,   0, 254,
    0,   0, 254,   0,   0, 254, 255, 255, 255, 254,   0,   0,
  254,   0,   0
];
var [jpg20, raster20] = JPEG.fromBytes(fs.readFileSync(__dirname + '/prog-arith2.jpg'));
assertArray(Array.from(raster20), array20);

/* Flat white image; restart interval is LESS than total MCUs in image */
var [jpg21, raster21] = JPEG.fromBytes(fs.readFileSync(__dirname + '/restart+subsampling.jpg'));
assertArray(Array.from(raster21), new Array(3 * 11 * 11).fill(255));

/* 11x11 with varied colors; progressive, arithmetic-coded, uses restarts and varied sampling factors */
const array22 = [
  255,   0,   1, 255,   0,   1, 165,  37,  38, 255, 217, 218,
  255, 254, 255, 255, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 255, 254,   0,   1,
  254,   0,   1, 166,  38,  38, 255, 217, 217, 254, 255, 255,
  255, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255, 254,   0,   1, 254,   0,   1,
  165,  37,  38, 255, 217, 218, 254, 255, 255, 254, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 217, 218,
  166,  38,  38, 254,   0,   1, 254,   0,   1, 255, 255, 255,
  255, 255, 255, 255, 254, 255, 255, 254, 255, 255, 255, 255,
  254, 255, 254, 254, 255, 255, 255, 217, 218, 166,  38,  39,
  254,   0,   0, 254,   0,   0, 254, 255, 255, 254, 255, 254,
  255, 255, 254, 255, 255, 254, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 216, 218, 166,  37,  39, 254,   0,   0,
  254,   0,   0, 255, 255, 255, 254, 255, 255, 255, 255, 255,
  255, 255, 255, 254, 255, 255,   0,   0,   0,   0,   0,   0,
    0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255,   0, 255, 255,   0,
  255, 255,   0, 255, 255,   0, 255, 255,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0, 255, 255,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0
];
var [jpg22, raster22] = JPEG.fromBytes(fs.readFileSync(__dirname + '/prog+arith+restart+sampling.jpg'));
assertArray(Array.from(raster22), array22);

/* Similar, but with Huffman coding, and the subsampling is in the vertical direction */
const array23 = [
  255,   0,   1, 254,   0,   0, 254,   0,   0, 255, 255, 255,
  255, 254, 254, 255, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 255, 255,   0,   1,
  254,   0,   0, 255,   0,   0, 254, 255, 255, 255, 255, 255,
  255, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255, 165,  39,  38, 166,  38,  41,
  165,  37,  38, 255, 216, 218, 255, 217, 218, 255, 216, 218,
   89, 217, 217,  90, 218, 219,  89, 217, 218,  89, 217, 218,
   89, 217, 218, 255, 217, 217, 255, 217, 220, 255, 217, 218,
  166,  37,  39, 166,  37,  38, 166,  38,  39, 165, 255, 255,
  165, 255, 255, 165, 255, 255, 165, 255, 255, 165, 255, 255,
  255, 254, 255, 255, 254, 255, 255, 255, 255, 254,   0,   0,
  254,   0,   0, 254,   0,   0, 254, 255, 255, 254, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 254, 255, 254,   0,   0, 254,   0,   0,
  255,   0,   0, 255, 255, 255, 255, 255, 254, 255, 255, 255,
  255, 255, 255, 255, 255, 255,   1,   0,   1,   0,   0,   0,
    0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
    0,   0,   0,   1,   0,   0,   0,   0,   0, 255, 255, 255,
  254, 255, 255, 255, 255, 255, 255, 255,   0, 255, 255,   0,
  255, 255,   0, 255, 255,   0, 255, 255,   0,   0,   0,   0,
    1,   0,   0,   0,   0,   0, 255, 255, 255, 254, 255, 255,
  255, 255, 255, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0, 255, 255,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0
];
var [jpg23, raster23] = JPEG.fromBytes(fs.readFileSync(__dirname + '/prog+restart+sampling.jpg'));
assertArray(Array.from(raster23), array23);

/* Similar, with arithmetic coding and subsampling in vertical direction */
const array24 = [
  255,   0,   1, 254,   0,   0, 254,   0,   0, 255, 255, 255,
  255, 254, 254, 255, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255,   0, 255, 255, 255,   0,   1,
  254,   0,   0, 255,   0,   0, 254, 255, 255, 255, 255, 255,
  255, 255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,
    0, 255, 255,   0, 255, 255, 165,  39,  38, 166,  38,  41,
  165,  37,  38, 255, 216, 218, 255, 217, 218, 255, 216, 218,
   89, 217, 217,  90, 218, 219,  89, 217, 218,  89, 217, 218,
   89, 217, 218, 255, 217, 217, 255, 217, 220, 255, 217, 218,
  166,  37,  39, 166,  37,  38, 166,  38,  39, 165, 255, 255,
  165, 255, 255, 165, 255, 255, 165, 255, 255, 165, 255, 255,
  255, 254, 255, 255, 254, 255, 255, 255, 255, 254,   0,   0,
  254,   0,   0, 254,   0,   0, 254, 255, 255, 254, 255, 254,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 254, 255, 254,   0,   0, 254,   0,   0,
  255,   0,   0, 255, 255, 255, 255, 255, 254, 255, 255, 255,
  255, 255, 255, 255, 255, 255,   1,   0,   1,   0,   0,   0,
    0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
    0,   0,   0,   1,   0,   0,   0,   0,   0, 255, 255, 255,
  254, 255, 255, 255, 255, 255, 255, 255,   0, 255, 255,   0,
  255, 255,   0, 255, 255,   0, 255, 255,   0,   0,   0,   0,
    1,   0,   0,   0,   0,   0, 255, 255, 255, 254, 255, 255,
  255, 255, 255, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0, 255, 255,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255,   0, 255, 255,   0, 255, 255,   0, 255, 255,   0,
  255, 255,   0
];
var [jpg24, raster24] = JPEG.fromBytes(fs.readFileSync(__dirname + '/prog+arith+vertsampling.jpg'));
assertArray(Array.from(raster24), array24);

/* Randomly generated JPEGs
 * Each of these revealed at least one bug */

/* Series of multiple zero bands in successive approximation scans */
const array25 = [
  168, 208, 141, 223, 143, 165, 247,  10, 235, 209,  89, 140,
  240,  83,   2,  91, 107, 229, 234, 146, 122, 250, 110, 225,
  220, 191, 136, 206, 205, 185, 155, 126,  36,  95, 247, 142,
  241, 245, 103,  77, 234, 152,  47, 101,   4, 123, 250,  48,
  250,  83,  61,  68, 117,  94,  79,  74,   6,  42,  26, 232,
  182, 113,  73, 192,  23, 171, 157, 240, 244,  59, 228,  48,
   56, 137, 145, 173,  24,  25,  31,  74, 126, 145,  82, 153,
  194, 254,  67,   5, 150,  46,  22,  89, 231,  37,  74, 187,
  147, 122, 194, 228,  97,  29,  34, 106, 102, 106, 231, 248,
  198, 166, 170, 238,  56,  41, 190,  71, 188, 226, 185, 243,
   97,   8, 132, 183, 123, 235, 169, 108, 138, 109,  82, 229,
  240,  76, 156, 219, 128,  84,  35, 103, 114, 227, 154,  95,
   78,  93,  92,  85, 127, 165, 241, 221, 121, 110,  94, 100,
  138, 231,  67, 224,  77, 157, 232, 232, 224, 216, 184, 122,
  109, 141,  56, 204, 142,   6, 130, 237, 219, 215, 126,  50,
  207, 252, 112,  35, 101,  39, 242,  46, 250,  86, 237, 220,
   74, 255, 120, 173, 139, 134, 182, 225, 122, 224,  72,  30,
    9,  27,  79, 119,   3, 120, 146, 224, 183,  86, 177, 102,
  175, 206,  25, 197, 149,  62, 157, 161, 153,  43,  38,  56,
   74, 123,   5,  78,  30,  86, 148, 237, 253,  74, 157, 194,
  135, 215, 249, 223, 191, 138,  33, 203, 153, 113, 178, 197,
  235,   8, 174,  60, 185, 166, 218,  79, 109,  73, 219, 160,
   99, 188, 251, 123,  66, 155,  57, 101, 185,  64, 107, 137,
  153,  94, 180,  47, 253,  50, 236, 222, 177,  32, 166,  67,
  173, 127,  10,  51, 133, 220,  73, 140, 147,  58,  59, 202
];
var [jpg25, raster25] = JPEG.fromBytes(fs.readFileSync(__dirname + '/random0.jpg'));
assertArray(Array.from(raster25), array25);

/* Number of MCUs in a scan was not evenly divisible by restart interval AND
 * last byte in entropy coded segment was 0xFF */
const array26 = [
  190,  68,  79,   2, 128, 228, 107, 166, 176, 254, 200, 119,
   97, 237, 144,  63, 251, 217, 189, 108, 175, 162, 153, 185,
  184, 211, 205, 127,  59, 150, 211,  27, 206, 203, 178, 173,
  231,  65, 124,  46, 236, 149, 255,  85,  58, 134, 148, 200,
  187,  30, 152, 221,  86,  62, 245, 135, 172, 167, 211, 170,
   32, 174, 168,  45,  71,  16, 254,  32, 151,  86,  65, 230,
  172,  54,   2, 176, 251, 190,  74,  76, 185,  71, 208,  56,
  234, 132, 133, 223, 105,  47,  11,   2,  68, 124, 153, 129,
  199,  39, 204, 107,  27,   4,  65,  44,  26,  14, 238, 255,
  234,  99, 198,  74, 148,  99,  14,  41, 218,  83,  99, 113,
  117, 161, 150,  58, 244, 153,  56,  70,  77, 199, 255,  46,
  244,  85, 203, 149,   2, 161, 214, 123,  90,  94, 130,  56,
  156, 225, 182, 110,  45,  65, 207, 154, 246, 185,  94, 249,
  203, 183, 134, 237,  91, 250, 181, 225, 244, 212, 154,  79,
   60, 248, 198, 177, 142,  40, 121, 154, 136, 140,  57, 234,
  138,   1, 190,  26, 189, 251, 255, 158,  87, 145, 233,  17,
  245, 138, 210, 149,  90, 177,  63,  75,  12, 151, 206, 155,
  251, 120,  98,  20, 214, 179, 251,  73, 221, 100,  56, 156,
  217, 169, 218, 187, 249, 246,  69, 209, 148, 239, 248, 156,
   32, 242,  18, 143,  13, 160, 146, 206,  43, 167, 253,  76,
   98, 241,  38, 246,  38, 146, 215, 112,   9,  14, 198, 202,
  245, 141,  50,   5, 254,  91,  46,  93, 114, 143, 214,  18,
  255, 146, 184, 217,  16,  46,  41, 176, 120, 106, 166,  20,
  136,  91, 207,   2, 127, 138, 233,  19, 179, 208,  68, 100,
  240, 158,   7, 201, 224, 161, 252, 211, 107, 193, 185, 136,
  140, 103,  60,  99, 188,  37, 174, 112, 178,   0,  82, 245,
   76,  38, 205, 114, 182, 156, 197, 153,  30, 248, 125, 166,
   41,  69, 136,  55, 152,  25,  89, 115,  21,  70, 162, 205,
   28, 233, 129,  49, 151,  14, 221, 234, 132, 245,  53,  56,
   27, 175,  59, 103, 173, 167, 234, 212, 158,  84, 226, 251,
   72, 217, 114,  90,  96, 157,  94, 221, 175, 246, 165,  42,
   51, 142,  95, 189, 192, 142,  50, 115,  69,  76, 229,  85,
  249, 227, 223, 231, 112, 157,  76, 167, 145,  43,  83, 107,
   41, 204,  63, 126,  69,  82,  52, 198, 162, 251, 105, 154,
  156, 101,  18, 126, 201,  60,  71, 166,  92,   2, 235, 209,
  232,  89, 151, 149,  28,  41, 189,  92,  74, 109,  49, 214,
  161, 159,  86, 218, 128, 122, 132,  81, 252,  48, 221,  33,
  230, 102,  36, 201,  97, 157, 102, 208, 208, 133, 144,  16,
  232, 240, 152, 135,  25, 210, 236,  21,  70, 148, 239, 201,
  125,  68,  74,  85, 191, 229, 236, 107,  84, 118,  19,  39,
  181, 212, 234,  33, 156, 147, 103, 228, 235, 209, 106,  91,
  238, 133,  18, 187, 233,  10, 110, 154, 148,  99,  10, 154,
  125, 181, 231,   9, 132,  44, 240, 121, 250,  20, 214,  61,
   40,   7,  26, 164, 145, 191,  74,  41,  59, 198, 100, 127,
    9, 215,  11,  96, 171, 145, 248,  52, 249,  46,  36,  95,
  225,  40, 116,  15, 132, 133,  84, 241, 220,  20, 208,  11,
   69, 183, 177,  68,  94, 185,  44, 245, 184, 113,  62, 238,
  211,  92, 158,  23, 213, 157,  64, 229, 253,   9, 173, 133,
   11, 114, 226,  61, 246, 230, 128, 201, 160,  21, 218, 175,
  123, 114,  42, 225, 254, 196, 138,  54, 154, 185, 179,  75,
   16, 235,  43,  39,  13, 245, 244, 138,   4, 105, 204,  98,
  123, 219, 233, 253, 112, 132, 204,  91, 154,  63, 122, 142,
  107,  87, 130, 227,  19,  28,  41, 139, 128,  30, 237, 235,
  188, 244,  75,  93,  22, 238, 236, 183,   9,  81, 243,  15,
  134, 243, 218,  20, 210, 205,  49, 209, 118, 238, 195, 140,
   63,  41, 220,   1, 102, 111,  47,  45, 145, 175, 253, 170,
  111,  58, 110, 250,  96, 152,  20, 171, 202, 234, 224, 181,
   86, 122, 251, 242, 238, 197, 245,  77,  53, 254, 231, 129,
   89,  30, 220,  91, 199, 159, 113, 177,  22, 246, 164, 200,
   58, 210, 118, 212, 179, 224, 172, 229, 151,  62, 221, 157,
  208,  28,  42, 155,  45,  69, 111, 252,   4,  13,   2,  51,
   25, 214, 250, 253,   1, 130, 164,  88, 152,  53, 124, 201,
  242,  12, 118,  76,  76,  91, 151, 119,  80, 180,  91,  42,
   50, 134, 154, 236,  39, 136,  66, 198, 205,  49,  34, 244,
  126,  64, 103,  31, 244,  53, 177, 215,   9, 255, 141, 106,
   87, 176, 230,  77, 134, 212, 130,  43, 239,  23, 140,  79,
  250, 148, 181,  25, 137, 127, 138, 161, 117, 243, 126,  50,
  224,  47,  18, 187,   7,  36, 204,  86,  35, 222, 250, 100,
   18,  14, 212, 243,  77,  53,  33,  12, 172, 237, 237, 119,
   70,  28, 207, 193, 130, 107, 138, 173,  10, 151, 158,  98
]
var [jpg26, raster26] = JPEG.fromBytes(fs.readFileSync(__dirname + '/random1.jpg'));
assertArray(Array.from(raster26), array26);

/* 0xF0 is used to skip 16 zero coefficients in a progressive scan
 * I was wrongly adding a new non-zero coefficient at the end of those 16 zeroes */
const array27 = [
  147, 250, 247, 173, 225,  22, 147, 178,  45,  71,   3, 160,
  111, 252, 233, 148, 110, 107, 172, 121,  95, 230,  80, 148,
  153, 164, 219,  39,  73,  82,  65, 191, 180,  92, 183, 186,
   48, 182, 164, 229, 227, 190, 178, 170, 206,  51,  77,  51,
   75,  38, 243,  64, 240, 166,  83, 191,  70, 213,  77, 197,
   23,  98, 130,  22, 115, 219, 126, 114, 168, 172, 162,  23,
    4,  46, 162, 233, 223,  32,  20,  41,  84,   3, 247,  87,
   10, 152, 196, 247, 185, 124,  99,  37, 169, 179,  94, 147,
   43, 222,  16,  92,  64, 113, 122, 208, 203, 112, 161, 156,
  172, 185, 154, 101,  25,  64, 149, 239,  93,  92,  40, 250,
  249, 179, 137, 225,  72, 254,  35, 152,  85,  91,  25,  41,
  122,  12, 240, 165,  83,  86, 178, 238, 179, 142,  58,  34,
  195, 239,  32, 180, 159, 146, 222, 173, 111, 239, 116, 216,
  140,  26, 181,  49,  35, 184, 176,  75,  56, 106, 200, 249,
  161, 170,  96, 167,  76,  40, 133, 141,  50, 113, 110,  41,
  180, 191,  33,  56, 202, 184, 238, 109, 249,   2, 126, 134,
   24,  22, 223, 138,  69, 200, 100, 246, 117,  35, 126,   5,
   44,  58, 135, 249, 249, 127, 233,   5, 162, 218, 143,  50,
  128,  95, 141, 238, 180,  65,   2,  56, 101,  40, 102,  35,
  101,  11, 174,   8,  33,  61, 246, 138, 147,   4, 132,  22,
  123, 191,  83, 130,  95,  61, 141, 101, 116, 188,  63, 215,
  137,  91, 242,  36,  12,  10, 194, 245,  45, 218,  69, 198,
   24,  29, 171,  16,  24,  60, 154, 130, 178, 178, 134, 154,
  176, 114, 186, 239, 242, 183,  55, 154, 235, 141, 248, 225,
  239, 126, 253, 238, 196,  23, 247, 197, 187, 106,  85,  86,
  216, 226, 127, 124, 197,  89, 254, 248, 236, 138,  10,  56,
  121, 210, 244, 215,  90, 115, 186, 255, 154, 103, 128, 253,
   53,  85, 150,  97, 201, 252,  78, 166, 113, 118,   3,  81,
  215, 106, 145, 177,  26,  34, 186, 229, 161,  81,   2, 114,
  182, 101,  30,  18,  37,  54, 254, 229,  75, 178, 167, 168,
   32, 239,  62, 179, 151,  28, 112, 167, 125,  67, 174,  16,
   58,  34,  67, 242,  55, 238,  37, 206, 105,   3, 159,  76,
   59, 105, 224,  87, 108,  92, 185,  76, 166,  70,  54, 169,
   84,  57, 212,  99, 231,  47,  53,  62, 179,   6, 129, 114,
    1, 180, 105, 194,  98, 231, 144, 135, 233,  12, 137,  76,
  229,  64, 159,  79, 235, 208, 118, 102, 244,  63, 211, 113,
  155, 125,   2,  26,  13,  52, 164,  99,  24,  14, 110, 100,
  223, 177, 191,   5, 177,   9,   8, 172, 106, 108,  44, 159,
  239, 105, 134, 113,  63,  32, 204, 191,  78,  77, 138,  73,
  255, 215, 149, 171,  41,  21, 135, 134, 243,  31,  56, 154,
  238,  33,  19,  29,  58, 127, 198, 156, 133,  85,   7, 190,
   60, 123, 165,  22, 172,  29,  29, 243,   5,  57, 139, 145,
  201, 216, 196,   6,   6, 230, 137, 103,  18,  84, 248,  65,
  215, 129, 140, 251, 134,  32, 171,   6,  63, 243,  78, 254,
  101, 181, 118, 179,  28, 139, 225, 100,  31, 204,  24,  76,
  176, 126, 243,  34, 241, 222,  65,  68, 195, 235, 210,  86,
  231, 222, 241, 122, 178, 126, 199,  98, 158, 187, 233,  57,
   39,  58,  61, 253, 113,  77, 186,  93, 188,  43,  22, 255,
  214, 114, 175,  95, 163, 210, 132, 226, 156, 139, 247, 138,
  216,  16,  26,  31, 218, 245,  49, 235, 112,  38, 236,  81,
   28, 189, 236,  65,  93, 114, 115, 241,  42, 237,  98,  58,
    5,  29, 120, 121, 254,  48,  45, 220, 109,  89,   5, 196,
   50, 137, 208, 222,  76, 173, 212,  82, 178,  91, 250,  82,
  118, 195, 179, 104,  69, 123, 227,  92, 254,   7,  41, 119,
  182, 218,  13, 191, 107, 124, 241, 118,  68, 142, 190, 166,
  240,   1,   3,  62,  94, 198, 192,  44, 155, 178,  29,  97,
   95, 164,  63, 215, 103, 168, 203,  87, 182,  45,  57,  16,
   45, 108, 153, 146,   1,  31, 131, 226, 212,  74, 143,  27,
  167,  12,  39, 156, 135, 202,   8, 117,  86, 152,   8,  90,
  234,  89, 254,  82, 183, 201, 175, 216,   5, 174, 128, 223,
  143,  17, 222, 150,  52,  58,  26,  86, 136,   3, 165, 202,
  144,  14,  22, 219, 214,  45, 197, 107, 125, 255,  38, 137,
  126, 168, 206, 239, 200, 245, 222, 178,  61, 119, 187,  47,
   87, 216,  25, 222, 200, 186, 102, 121,  15, 106, 210, 239,
   25,  52, 173, 197, 168, 200,  38,  53,  98, 218, 117,  52
]
var [jpg27, raster27] = JPEG.fromBytes(fs.readFileSync(__dirname + '/random2.jpg'));
assertArray(Array.from(raster27), array27);

/* Number of zero bands was not being calculated correctly in the first progressive scan
 * for a component (not a successive refinement scan) */
const array28 = [
  138,  82,  95, 231, 175, 188, 105,  98, 100, 220, 213, 214,
   83, 127, 119,  74, 118, 110,  60, 112, 107, 121, 174, 169,
  129, 154, 161, 166, 192, 199, 120,  64,  77, 197, 142, 155,
  198, 191, 192, 168, 161, 162, 138, 182, 174,  70, 113, 105,
  132, 184, 180,  66, 118, 114, 118, 143, 150, 136, 161, 168,
  132, 102, 112, 166, 136, 146, 115, 119, 121, 178, 182, 183,
   46,  85,  79, 102, 141, 135, 138, 182, 178, 118, 163, 158,
  118, 142, 146, 127, 151, 155, 174, 144, 154, 115,  84,  94,
   52,  56,  58, 231, 235, 236,  40,  79,  72, 107, 146, 139,
  105, 150, 145, 161, 206, 201, 134, 158, 162, 146, 171, 174,
  138, 149, 156,  37,  48,  55, 137, 156, 158, 199, 218, 221,
  165, 192, 190,  97, 124, 122, 119, 148, 144,  88, 118, 113,
   87, 110, 107,  88, 111, 108, 122, 133, 140, 105, 116, 123,
  140, 158, 161, 132, 151, 154,  70,  98,  96, 141, 168, 166,
   95, 125, 120,  37,  66,  62, 173, 196, 193, 149, 172, 169,
  110, 163, 170, 134, 187, 194,  65,  94, 102,  73, 102, 110,
    0,   0,   0, 197, 204, 209,  93, 101,  97, 113, 120, 117,
  128, 152, 140,  96, 120, 108, 132, 186, 193,  84, 138, 144,
  104, 133, 141,  43,  72,  80, 111, 118, 123, 173, 180, 185,
  131, 139, 135, 171, 178, 175, 143, 167, 155, 122, 146, 134,
    3,  88, 100, 101, 186, 198, 150, 178, 196,  82, 110, 128,
   60,  36,  52, 145, 121, 138,  99,  80,  79, 135, 116, 115,
  102, 129, 106,  81, 109,  86,  20, 106, 117,  95, 181, 192,
  126, 154, 172,  65,  94, 112,  68,  44,  60, 166, 142, 158,
  108,  89,  88, 126, 107, 106,  66,  94,  71,  46,  74,  51
]
var [jpg28, raster28] = JPEG.fromBytes(fs.readFileSync(__dirname + '/random3.jpg'));
assertArray(Array.from(raster28), array28);

/* Arithmetic-coded, with restart markers. Checking for End of Band immediately
 * after a zero coefficient caused this one to display incorrectly */
const array29 = [
  171, 171, 171, 131, 131, 131, 112, 112, 112, 156, 156, 156,
  221, 221, 221, 229, 229, 229, 161, 161, 161,  85,  85,  85,
  109, 109, 109, 188, 188, 188, 196, 196, 196, 115, 115, 115,
   88,  88,  88, 143, 143, 143,  68,  68,  68, 127, 127, 127,
  179, 179, 179, 168, 168, 168, 114, 114, 114,  82,  82,  82,
  103, 103, 103, 140, 140, 140,  91,  91,  91,  47,  47,  47,
   64,  64,  64, 127, 127, 127, 120, 120, 120,  65,  65,  65,
   92,  92,  92, 161, 161, 161, 212, 212, 212, 179, 179, 179,
   98,  98,  98,  62,  62,  62, 110, 110, 110, 177, 177, 177,
  132, 132, 132,  73,  73,  73,  69,  69,  69, 114, 114, 114,
   91,  91,  91,  18,  18,  18, 183, 183, 183, 165, 165, 165,
  143, 143, 143, 131, 131, 131, 129, 129, 129, 132, 132, 132,
  131, 131, 131, 128, 128, 128, 107, 107, 107, 165, 165, 165,
  152, 152, 152,  69,  69,  69,  49,  49,  49, 102, 102, 102,
  157, 157, 157, 136, 136, 136, 109, 109, 109,  93,  93,  93,
   92,  92,  92,  97,  97,  97, 101, 101, 101, 101, 101, 101,
   43,  43,  43, 106, 106, 106, 112, 112, 112,  66,  66,  66,
   92,  92,  92, 182, 182, 182, 101, 101, 101, 160, 160, 160,
  198, 198, 198, 155, 155, 155,  74,  74,  74,  48,  48,  48,
  110, 110, 110, 186, 186, 186, 129, 129, 129,  55,  55,  55,
   51,  51,  51, 131, 131, 131, 161, 161, 161, 122, 122, 122,
  130, 130, 130, 175, 175, 175, 206, 206, 206, 181, 181, 181,
  128, 128, 128, 110, 110, 110, 151, 151, 151, 202, 202, 202,
  204, 204, 204, 116, 116, 116,  91,  91,  91, 153, 153, 153,
  167, 167, 167, 110, 110, 110, 179, 179, 179, 121, 121, 121,
   79,  79,  79, 105, 105, 105, 171, 171, 171, 196, 196, 196,
  152, 152, 152,  93,  93,  93, 125, 125, 125, 167, 167, 167,
  152, 152, 152, 103, 103, 103, 137, 137, 137, 225, 225, 225,
  123, 123, 123, 138, 138, 138, 150, 150, 150, 144, 144, 144,
  125, 125, 125, 112, 112, 112, 114, 114, 114, 122, 122, 122,
   74,  74,  74,  75,  75,  75, 117, 117, 117, 181, 181, 181,
  196, 196, 196, 160, 160, 160, 135, 135, 135, 153, 153, 153,
  169, 169, 169, 165, 165, 165, 144, 144, 144, 124, 124, 124,
  119, 119, 119, 122, 122, 122, 102, 102, 102,  89,  89,  89,
  111, 111, 111, 156, 156, 156, 162, 162, 162, 129, 129, 129,
   54,  54,  54,  87,  87,  87, 127, 127, 127, 151, 151, 151,
  154, 154, 154, 151, 151, 151, 155, 155, 155, 162, 162, 162,
  159, 159, 159, 128, 128, 128, 123, 123, 123, 146, 146, 146,
  145, 145, 145, 120, 120, 120,  38,  38,  38,  70,  70,  70,
  109, 109, 109, 128, 128, 128, 124, 124, 124, 113, 113, 113,
  109, 109, 109, 111, 111, 111, 200, 200, 200, 158, 158, 158,
  139, 139, 139, 153, 153, 153, 153, 153, 153, 140, 140, 140,
  126, 126, 126, 142, 142, 142, 151, 151, 151, 136, 136, 136,
   97,  97,  97,  58,  58,  58,  34,  34,  34,  27,  27,  27,
  176, 176, 176, 138, 138, 138, 123, 123, 123, 142, 142, 142,
  149, 149, 149, 141, 141, 141, 112, 112, 112, 127, 127, 127,
  139, 139, 139, 134, 134, 134, 116, 116, 116, 104, 104, 104,
  107, 107, 107, 116, 116, 116, 115, 115, 115,  88,  88,  88,
   89,  89,  89, 120, 120, 120, 128, 128, 128, 111, 111, 111,
   74,  74,  74,  89,  89,  89, 104, 104, 104, 111, 111, 111,
  117, 117, 117, 138, 138, 138, 172, 172, 172, 200, 200, 200,
   85,  85,  85,  70,  70,  70,  87,  87,  87, 127, 127, 127,
  127, 127, 127,  89,  89,  89, 145, 145, 145, 141, 141, 141,
  126, 126, 126,  99,  99,  99,  75,  75,  75,  74,  74,  74,
   97,  97,  97, 120, 120, 120,  94,  94,  94,  86,  86,  86,
  112, 112, 112, 155, 155, 155, 147, 147, 147,  90,  90,  90,
   20, 123, 196,  35, 139, 211, 169,  65, 105, 132,  28,  68,
  180,  25,   0, 224,  68,  29, 125, 149,  50, 112, 136,  37,
   65, 201, 137,  13, 149,  84,  78, 161, 157, 103, 186, 182,
   67, 151, 108, 109, 192, 150
]
var [jpg29, raster29] = JPEG.fromBytes(fs.readFileSync(__dirname + '/random4.jpg'));
assertArray(Array.from(raster29), array29);

const array30 = [
   85, 180, 103,  30, 208, 103,  69, 146, 212, 190,  84, 212,
  121, 130, 135,  45, 169, 135, 115, 149, 128, 255,  66, 128,
  131, 106,  71,  46, 149,  71,  24, 193,  47, 239,  84,  47,
   84, 134,  90, 135, 108,  90, 126, 161,  92,  63, 193,  92,
   72, 183,  12, 189, 123,  12,  29, 176, 139,  24, 179, 139,
  187, 123,  72, 122, 157,  72, 153,  94,  74, 212,  64,  74,
  183, 104,  88,  20, 187,  88, 167,  84, 131, 188,  73, 131,
  255,  78, 158, 102, 161, 158, 255,  49, 129, 121, 135, 129,
  173, 115,  74, 161, 121,  74, 215,  75, 248, 106, 131, 248,
   89, 104, 191, 167,  64, 191, 127, 103, 246, 211,  59, 246,
  100, 137,  31,  92, 141,  31,  47, 131, 207, 122,  93, 207,
  117, 151, 172,  57, 181, 172, 192,  90,  83, 221,  76,  83,
  103, 103, 132, 127,  90, 132, 211,  94, 254, 167, 116, 254,
  174,  99, 155,  58, 158, 155,  94, 128, 159, 190,  79, 159,
   90, 124, 130,   0, 196, 130,  81, 177, 132, 123, 156, 132,
   30, 181,  41, 129, 131,  41, 141,  85, 123,  35, 139, 123,
  138, 176,  19, 201, 144,  19, 144, 139,  27,  36, 194,  27,
  218,  63, 169, 128, 108, 169, 117, 125,  52,  34, 168,  52,
  159, 136, 135, 104, 165, 135, 195,  74, 158,  87, 129, 158,
  111,  76, 249, 136,  63, 249, 255,  87, 134, 159, 143, 134,
   82, 134, 215, 104, 123, 215,  39, 158, 146, 116, 119, 146,
   76, 168,  97, 238,  86,  97, 153,  87, 118, 160,  83, 118,
  147, 134, 255,  42, 187, 255,  47, 200, 128, 170, 137, 128,
  165,  96, 125, 255,  50, 125,  99, 127, 211,  84, 135, 211,
  190, 121, 158, 146, 143, 158, 183,  89, 224, 160, 101, 224,
  200,  78,  40, 120, 119,  40,  73, 206,  91, 152, 165,  91,
  177, 126, 170,  59, 186, 170,  88, 115, 230,  68, 125, 230,
   66, 157, 146, 150, 114, 146,  91, 182, 106, 173, 140, 106,
   42, 192,  64, 141, 141,  64, 146,  71, 218, 138,  75, 218,
  120, 159, 207, 197, 120, 207, 103, 174, 115,  66, 193, 115,
  161, 105,  94,  73, 149,  94, 121, 141,  83, 185, 108,  83,
  134, 160, 105, 246, 103, 105, 173, 105, 147, 145, 119, 147,
    8, 167, 151, 251,  44, 151,  31, 169, 112, 189,  89, 112,
    6, 153, 152, 165,  72, 152, 235,  44, 102,   0, 180, 102,
  123, 112, 225, 161,  92, 225, 231,  56, 250,   0, 199, 250,
  193, 100, 122,  86, 154, 122, 196,  95,  32,  59, 165,  32,
  122, 124, 109,  62, 154, 109, 194,  67, 102,  75, 128, 102,
   99, 100, 170,  78, 110, 170,  86, 134, 205, 143, 105, 205,
  239,  86,  78, 140, 136,  78, 203,  99,  98, 159, 122,  98,
  174,  86, 135,  16, 167, 135, 210,  60, 205, 103, 114, 205,
  165,  65, 190, 193,  51, 190, 197,  40, 219, 121,  79, 219,
  145, 129,  78, 110, 146,  78, 149, 134,  65,  45, 187,  65,
  112, 156, 125, 118, 153, 125, 106, 120, 252, 135, 105, 252,
  167, 149, 210, 227, 118, 210,  50, 152, 139, 185,  83, 139,
   86, 125, 170, 125, 105, 170, 170, 126, 148, 115, 154, 148,
  120,  93, 105, 244,  29, 105, 255,  61, 187, 159, 120, 187,
    0, 216,  47, 163, 130,  47, 114, 184, 171, 252, 113, 171,
  109, 140,  50,  30, 180,  50,   0, 200,  96,  23, 172,  96,
  120, 162,  92, 170, 137,  92, 157,  74, 105, 110,  97, 105,
  121, 149, 141,  46, 187, 141,  49, 154, 223, 110, 123, 223,
  154, 188,  43, 184, 172,  43, 132, 117, 106, 150, 108, 106,
   62, 136, 175, 189,  72, 175, 203, 117, 109, 138, 150, 109,
   44, 124, 143, 146,  72, 143, 116, 104, 169,  42, 142, 169,
  224, 115, 147, 188, 133, 147,  30, 193,  85,  73, 171,  85,
  196,  84, 207, 180,  93, 207,   0, 164, 132, 211,  42, 132,
    0, 159, 119, 237,  38, 119, 149, 111, 104,  99, 137, 104,
  141,  98, 132, 126, 106, 132, 156, 156, 112,  99, 185, 112,
   72, 186,  10, 212, 115,  10, 117, 129, 184, 176,  99, 184,
  168,  54, 186, 166,  55, 186,   0, 158, 149, 135,  83, 149,
    0, 200, 105, 190,  90, 105
]
var [jpg30, raster30] = JPEG.fromBytes(fs.readFileSync(__dirname + '/random5.jpg'));
assertArray(Array.from(raster30), array30);

const array31 = [
   50, 111,  56,  78,  97,  56,  98,  87,  56,  83,  94,  56,
   85, 147,  90,  71, 154,  90,  91, 144,  90, 119, 130,  90,
   98, 150,  94, 109, 145,  94, 126, 136,  94, 146, 126,  94,
  125,  78,  52, 137,  72,  52,  48, 109,  54,  75,  95,  54,
   95,  85,  54,  81,  92,  54,  73, 135,  78,  59, 142,  78,
   79, 132,  78, 106, 118,  78,  83, 135,  79,  94, 130,  79,
  112, 121,  79, 131, 111,  79, 123,  77,  51, 135,  71,  51,
  107, 168, 113, 134, 154, 113, 154, 144, 113, 140, 151, 113,
  114, 176, 119, 100, 183, 119, 120, 173, 119, 147, 159, 119,
  119, 171, 115, 129, 165, 115, 147, 156, 115, 167, 146, 115,
  178, 132, 106, 190, 126, 106,  91, 143, 100, 118, 128, 100,
  139, 118, 100, 126, 125, 100,  82, 130,  88,  69, 137,  88,
   90, 126,  88, 118, 112,  88,  88, 114,  78,  93, 111,  78,
  103, 106,  78, 113, 101,  78, 132, 106,  86, 138, 103,  86,
   98, 150, 108, 126, 136, 108, 147, 125, 108, 134, 132, 108,
   76, 124,  82,  63, 131,  82,  84, 120,  82, 112, 106,  82,
   78, 104,  68,  83, 101,  68,  93,  96,  68, 103,  91,  68,
  132, 105,  85, 138, 102,  85, 135, 187, 145, 163, 173, 145,
  184, 163, 145, 171, 169, 145, 109, 157, 115,  96, 164, 115,
  117, 153, 115, 145, 139, 115, 113, 139, 103, 119, 137, 103,
  129, 132, 103, 139, 126, 103, 173, 147, 127, 180, 144, 127,
   99, 140, 114, 128, 125, 114, 150, 114, 114, 138, 120, 114,
   82, 110,  89,  71, 116,  89,  93, 104,  89, 121,  90,  89,
  105,  95,  87, 103,  96,  87, 101,  97,  87,  98,  99,  87,
  126, 130, 118, 126, 131, 118, 113, 153, 127, 141, 139, 127,
  163, 127, 127, 152, 133, 127, 100, 127, 106,  88, 133, 106,
  110, 122, 106, 139, 107, 106, 130, 119, 112, 128, 120, 112,
  125, 122, 112, 122, 123, 112, 155, 159, 147, 155, 160, 147,
  102, 142, 117, 130, 128, 117, 152, 117, 117, 141, 122, 117,
  114, 141, 120, 102, 147, 120, 124, 136, 120, 153, 121, 120,
  139, 128, 120, 137, 129, 120, 134, 130, 120, 131, 132, 120,
  120, 124, 112, 119, 124, 112, 139, 177, 160, 169, 162, 160,
  193, 149, 160, 184, 154, 160, 155, 168, 161, 146, 172, 161,
  170, 160, 161, 199, 145, 161, 182, 144, 157, 173, 149, 157,
  159, 155, 157, 146, 162, 157, 123, 151, 145, 120, 153, 145,
  101, 138, 121, 130, 123, 121, 154, 111, 121, 145, 115, 121,
  112, 124, 117, 102, 129, 117, 126, 117, 117, 156, 102, 117,
  130,  93, 105, 122,  97, 105, 108, 104, 105,  95, 111, 105,
   64,  93,  86,  61,  94,  86, 145, 182, 165, 174, 167, 165,
  198, 155, 165, 189, 160, 165, 154, 166, 159, 144, 171, 159,
  168, 159, 159, 198, 144, 159, 169, 131, 144, 160, 136, 144,
  146, 143, 144, 133, 149, 144,  98, 127, 121,  96, 128, 121,
   74, 122,  98, 105, 107,  98, 131,  94,  98, 124,  97,  98,
   94, 105,  96,  87, 108,  96, 113,  95,  96, 143,  79,  96,
  113,  73,  87, 101,  80,  87,  82,  89,  87,  67,  97,  87,
   38,  76,  71,  43,  74,  71, 131, 179, 155, 162, 164, 155,
  188, 151, 155, 181, 154, 155, 158, 169, 160, 151, 172, 160,
  177, 159, 160, 207, 143, 160, 188, 148, 162, 176, 155, 162,
  157, 164, 162, 142, 172, 162, 124, 162, 157, 129, 160, 157,
   80, 128, 103, 110, 112, 103, 136,  99, 103, 129, 103, 103,
  115, 126, 117, 108, 129, 117, 134, 116, 117, 164, 100, 117,
  158, 119, 132, 146, 125, 132, 128, 134, 132, 112, 142, 132,
  108, 145, 140, 112, 143, 140,  72, 143,  97, 103, 127,  97,
  131, 113,  97, 126, 115,  97, 120, 142, 117, 115, 145, 117,
  143, 131, 117, 174, 115, 117, 164, 148, 144, 152, 154, 144,
  136, 163, 144, 127, 167, 144, 143, 173, 163, 162, 163, 163,
  112, 183, 136, 143, 167, 136, 171, 153, 136, 166, 155, 136,
  133, 156, 130, 129, 158, 130, 156, 144, 130, 188, 128, 130,
  148, 132, 128, 136, 138, 128, 120, 147, 128, 111, 151, 128,
  116, 145, 136, 135, 136, 136
]
var [jpg31, raster31] = JPEG.fromBytes(fs.readFileSync(__dirname + '/random6.jpg'));
assertArray(Array.from(raster31), array31);

const array33 = [
  135, 155, 125, 139, 159, 129, 201, 221, 190, 151, 170, 140,
  189, 208, 178, 169, 189, 158, 136, 159, 127,  85, 108,  76,
  225, 255, 169,  85, 131,  53, 145, 187, 135,  84, 121,  96,
  111, 177, 160, 125, 190, 182, 113, 133, 102, 146, 166, 135,
  135, 155, 125,  93, 113,  82, 100, 119,  89, 185, 204, 174,
  159, 182, 151, 111, 134, 103, 139, 171,  83,  12,  58,   0,
  142, 184, 132, 101, 139, 113,  13,  79,  62,  12,  76,  68,
   80,  90, 144, 164, 173, 227, 130, 139, 194, 109, 116, 171,
   78,  85, 140, 182, 188, 243, 130, 136, 191,  48,  54, 109,
  163, 188, 126, 152, 184, 132, 197, 225, 194, 184, 209, 198,
  233, 255, 255, 164, 208, 203,  76,  85, 140, 154, 163, 218,
  144, 154, 208, 111, 117, 172,  96, 103, 158, 112, 119, 174,
  105, 111, 167,  21,  28,  83, 194, 219, 157,  29,  60,   9,
   55,  83,  52,  89, 114, 103,  28,  73,  66,  54,  99,  94,
  110, 141,  73, 127, 158,  90, 139, 171, 103,  65,  92,  25,
  117, 143,  77,  26,  53,   0, 149, 171, 106, 108, 129,  65,
   46,  61,  38, 168, 179, 166, 158, 167, 167, 188, 197, 205,
  236, 251, 255, 143, 160, 157, 138, 169, 101, 143, 175, 107,
  180, 211, 143, 106, 133,  67, 192, 219, 153,  20,  46,   0,
  176, 197, 133, 119, 140,  76, 196, 210, 188, 172, 184, 171,
  111, 121, 120, 128, 136, 144,  53,  68,  74, 107, 123, 121,
  110, 123, 143, 158, 171, 190, 171, 185, 204, 136, 146, 166,
  209, 219, 239,  63,  72,  93, 174, 178, 200,  63,  67,  89,
   77,  83,  93, 217, 216, 233,  75,  73,  95,  69,  67,  88,
  113, 109, 121, 136, 135, 129,  56,  69,  88, 126, 140, 159,
   68,  81, 100,  54,  64,  84, 114, 123, 144,  77,  87, 107,
  185, 188, 211,  63,  66,  89,   0,   0,   7, 205, 203, 220,
  172, 170, 192, 175, 173, 194,  90,  87,  98,  99,  98,  92,
  188, 188, 211, 153, 153, 176, 144, 144, 168, 172, 173, 197,
  185, 186, 209, 159, 160, 183, 132, 134, 157, 128, 130, 153,
  127, 129, 150, 110, 112, 135, 184, 186, 210, 172, 175, 192,
  206, 208, 210, 168, 174, 152,  96,  96, 120, 114, 114, 138,
  144, 144, 168, 147, 148, 172, 103, 104, 128,  68,  69,  92,
  102, 105, 128, 167, 170, 193, 215, 217, 238, 165, 166, 190,
  129, 130, 154, 125, 128, 146, 107, 109, 112, 155, 161, 139,
  150, 143,  88, 137, 131,  75, 140, 133,  78, 141, 144,  86,
  126, 129,  71, 111, 114,  56, 131, 149,  86, 182, 200, 136,
  153, 160, 168, 116, 136, 142,  66,  85,  92, 123, 144, 144,
   73, 103,  83, 159, 193, 149, 157, 151,  95, 119, 112,  57,
   99,  92,  37, 107, 110,  52, 116, 119,  60, 109, 112,  54,
  110, 129,  65, 137, 155,  91, 120, 127, 135, 107, 126, 132,
  112, 132, 138, 169, 190, 189, 132, 162, 143, 170, 204, 161,
  132,  84, 157, 132,  84, 158, 146,  98, 171, 140, 111, 178,
  113,  84, 152,  90,  61, 128, 101, 103, 160, 157, 159, 216,
  152, 165, 149,  98, 141, 118, 122, 165, 144,  79, 123,  99,
   52, 119,  74,  23,  94,  27, 145,  97, 171, 126,  79, 152,
  130,  82, 156, 142, 113, 181, 148, 119, 186, 136, 108, 175,
  129, 131, 188, 160, 162, 219, 204, 218, 201, 147, 191, 168,
  189, 232, 212, 117, 161, 137, 100, 167, 122,  46, 117,  50,
  150, 102,  94, 104,  57,  49,  86,  39,  31, 102,  79,  63,
  133, 110,  94, 133, 110,  94, 103, 121,  91, 112, 130, 100,
   73,  92,  57,  35,  95,  51,  70, 129,  89,  68, 128,  87,
   29, 122,  59,  22, 118,  37, 150, 102,  95, 157, 110, 102,
  174, 127, 119, 156, 133, 117, 117,  95,  79,  92,  69,  53,
  108, 126,  96, 177, 195, 165, 138, 157, 122,  99, 159, 115,
   72, 132,  92, 122, 181, 140,  48, 141,  78, 119, 214, 133,
  173, 154,  83, 213, 177, 209, 153, 139,  36, 185, 159,   0,
  175, 105, 212, 183, 152,  20, 255, 205, 184, 164, 118,  28,
  121,  51, 112, 148, 141,  17, 191, 147, 249,  67,  25, 117,
  219, 246, 246,  57,  58, 220
];
var [jpg33, raster33] = JPEG.fromBytes(fs.readFileSync(__dirname + '/random8.jpg'));
assertArray(Array.from(raster33), array33);

console.log("OK!");
